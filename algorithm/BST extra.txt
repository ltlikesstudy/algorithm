

print range  of BST


public class TreeNode{
    int val;
    TreeNode left;
    TreeNode right;
    public void TreeNode(int i){
        this.val = i;
        this.left = null;
        this.right = null;
    }
}

public class solution {
    public List<TreeNode> findRange (TreeNode root,int k1,int k2) {
        List<TreeNode> rst = new ArrayList<TreeNode>();
        if (root == null) {
            rst.add(null);
            return rst;
        }
        help(root,k1,k2,rst);
        return rst;
    }
    private void help(TreeNode root, int k1, int k2,List<TreeNode> rst) {
        if (root == null) {
            return;
        }
        if (root.val > k2) {
            help(root.left,k1,k2,rst);
        }
        if (root.val < k1) {
            help(root.right,k1,k2,rst);
        }
        if (root.val <= k2 || root.val >= k1) {
            rst.add(root);
            help(root.left,k1,k2,rst);
            help(root.right,k1,k2,rst);
        }
    }
}

implement iterator in BST

public class Iterator {

    private Stack<Node> stack = new Stack<>();
    private Node current;

    private Iterator(Node argRoot) {
        current = argRoot;
    }

    public Node next() {
        while (current != null) {
            stack.push(current);
            current = current.left;
        }

        current = stack.pop();
        Node node = current;
        current = current.right;

        return node;
    }

    public boolean hasNext() {
        return (!stack.isEmpty() || current != null);
    }

    public static Iterator iterator(Node root) {
        return new Iterator(root);
    }
}

delete a node in BST

case 1: leaf node
case 2: just one child node
case 3: 2 child node(find the left max or the right min)
